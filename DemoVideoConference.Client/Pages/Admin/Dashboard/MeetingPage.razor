@page "/meeting/{MeetingId}"
@attribute [Authorize]
@using DemoVideoConference.Shared.Meeting.Responses
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@layout DashboardLayout


<div class="row" style="opacity:@PageOpacity">
    <div class="col-lg-12 card border-0">
        <div class="card-body video-conference-container" id="@ContainerId"</div>
    </div>>
</div>
@code{
    int PageOpacity = 0;
    bool ShowLoader = false;
    bool IsMessageModalOpen = false;
    string Message = string.Empty;
    string ContainerId = "host-video-container";
    [Parameter] public string MeetingId {get; set;} = string.Empty;
    [CascadingParameter] Task<AuthenticationState>? AuthState {get; set;}

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(MeetingId))
            NavManager.NavigateTo("/dashboard");
    }

    protected async override Task OnInitializedAsync()
    {
        ShowLoader = true;
        //get username from auth state
        var user = (await AuthState!).User;
        string name = user.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Name)!.Value;

        //get meeting token
        TwilioServiceResponse? response = await twilioService.GenerateMeetingToken(name, MeetingId)!;
        if (!response!.IsSuccess)
        {
            //display message if error occured
            Message = response.Message!;
            IsMessageModalOpen= true;
            ShowLoader = false;
        }
        //start twilio meeting
        await twilioService.JoinMeeting(token: response.Data!, roomName: MeetingId, containerId: ContainerId);
        ShowLoader = false;
        PageOpacity = 1;
    }
    void Ok()
    {
        IsMessageModalOpen = false;
    }
}